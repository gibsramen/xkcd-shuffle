{"version":3,"sources":["components/App/App.tsx","components/Header/Header.tsx","components/PanelSelection/PanelSelection.tsx","components/Comic/Comic.tsx","components/Footer/Footer.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","id","UIButtons","props","onClick","submitOnClick","PanelSelection","name","onChange","value","extraBtnsDisabled","ComicInfo","comicLinks","comicsList","map","comic","slice","numPanels","link","index","className","href","target","rel","style","display","isLoading","Comic","altText","comicsUsed","comicPanels","i","push","src","imgLinks","alt","onLoad","imgLoaded","Footer","defaultComicLinks","rand","Math","floor","random","toString","App","useState","setNumPanels","selectedValue","setSelectedValue","setImgLinks","setComicsUsed","refresh","toggleRefresh","isComicPresent","setIsComicPresent","setIsLoading","counter","setCounter","useEffect","axios","post","getRandomPanels","then","response","data","img_links","original_comics","event","panelSelection","panelSelectionNum","parseInt","charAt","preventDefault","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7414181b.chunk.js","sourcesContent":["import { useState, useEffect, ChangeEvent, MouseEvent } from 'react';\nimport Header from '../Header/Header';\nimport PanelSelection from '../PanelSelection/PanelSelection';\nimport Comic from '../Comic/Comic';\nimport Footer from '../Footer/Footer';\nimport axios from 'axios';\nimport './App.css';\n\nconst apiUrl = \"https://ohls623gud.execute-api.us-west-1.amazonaws.com/default/return-random-xkcd-panels\";\n\nconst defaultComicLinks: string[] = [];\nfor (let i = 0; i < 5; i++) {\n  let rand = Math.floor(Math.random()*2400)\n  defaultComicLinks.push(rand.toString());\n}\n\ninterface Placeholder {\n  author: string,\n  id: string,\n  height: number,\n  width: number,\n  url: string,\n  download_url: string\n};\n\nfunction getRandomPlaceholders(numPanels: number) {\n  let rand = Math.floor(Math.random()*100)\n  let url = \"https://picsum.photos/v2/list?page=\" + rand + \"&limit=\" + numPanels;\n  return axios.get(url)\n}\n\nfunction getRandomPanels(numPanels: number) {\n  return axios.post(apiUrl, {numPanels: numPanels});\n}\n\nconst App = () => {\n  const [numPanels, setNumPanels] = useState(-1);\n  const [selectedValue, setSelectedValue] = useState(3);\n  const [imgLinks, setImgLinks] = useState([]);\n  const [comicsUsed, setComicsUsed] = useState(defaultComicLinks);\n  const [refresh, toggleRefresh] = useState(true);\n  const [isComicPresent, setIsComicPresent] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [counter, setCounter] = useState(0);\n\n  useEffect(() => {\n    if (numPanels !== -1) {\n      if (process.env.NODE_ENV === \"production\") {\n        getRandomPanels(numPanels).then(response => {\n          setImgLinks(response.data.img_links);\n          setComicsUsed(response.data.original_comics);\n        });\n      } else {\n        getRandomPlaceholders(numPanels).then(response => {\n          setImgLinks(response.data.map((data: Placeholder) => data.download_url))\n        })\n        setComicsUsed(defaultComicLinks);\n      }\n      setIsLoading(true);\n    }\n  }, [numPanels, refresh])\n\n  //https://stackoverflow.com/a/56903585\n  useEffect(() => {\n    if (counter >= numPanels && numPanels !== -1) {\n      setIsLoading(false);\n      setCounter(0);\n    }\n  }, [counter, isLoading, numPanels])\n\n  const selectNumPanels = (event: ChangeEvent<HTMLSelectElement>) => {\n    const panelSelection = event.target.value;\n    const panelSelectionNum = parseInt(panelSelection.charAt(0));\n    setSelectedValue(panelSelectionNum);\n  };\n\n  const submitEvent = (event: MouseEvent<HTMLButtonElement>) => {\n    setIsComicPresent(true); //don't show before button clicked\n    toggleRefresh(!refresh); //allow refresh even if no new numPanels\n    setNumPanels(selectedValue);\n    event.preventDefault();\n  };\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <PanelSelection\n        onChange={selectNumPanels}\n        onClick={submitEvent}\n        value={selectedValue}\n        extraBtnsDisabled={!isComicPresent}\n      />\n      {\n        isComicPresent &&\n        <Comic\n          numPanels={numPanels}\n          imgLinks={imgLinks}\n          comicsUsed={comicsUsed}\n          imgLoaded={() => setCounter(counter+1)}\n          isLoading={isLoading}\n        />\n      }\n      <Footer />\n     </div>\n  );\n};\n\nexport default App;\n","import './Header.css';\n\nconst Header = () => {\n  return (\n    <header id=\"header\">\n      <h1>xkcd-shuffle</h1>\n    </header>\n  )\n}\n\nexport default Header;\n","import { ChangeEvent, MouseEvent } from 'react';\nimport './PanelSelection.css';\n\ninterface Props {\n  onChange: (event: ChangeEvent<HTMLSelectElement>) => void,\n  onClick: (event: MouseEvent<HTMLButtonElement>) => void,\n  value: number,\n  extraBtnsDisabled: boolean\n};\n\nconst PanelSelection = (props: Props) => {\n  return (\n    <div id=\"panel-number-select\">\n      <label>Number of panels: </label>\n      <select\n        name=\"num-panels\"\n        id=\"num-panels-select\"\n        onChange={props.onChange}\n      >\n        <option value=\"3-panels\">3</option>\n        <option value=\"4-panels\">4</option>\n        <option value=\"5-panels\">5</option>\n      </select>\n      <UIButtons\n        extraBtnsDisabled={props.extraBtnsDisabled}\n        submitOnClick={props.onClick}\n      />\n    </div>\n  )\n};\n\nconst UIButtons = (props: any) => {\n  return (\n      <span>\n        <button onClick={props.submitOnClick}>Submit</button>\n      </span>\n  )\n};\n\nexport default PanelSelection;\n","import './Comic.css';\n\ninterface ComicProps {\n  numPanels: number,\n  imgLinks: Array<string>,\n  comicsUsed: Array<string>,\n  imgLoaded: () => void,\n  isLoading: boolean\n};\n\nconst Comic = (props: ComicProps) => {\n  const altText = props.comicsUsed.map((comic) => \"comic-\" + comic)\n\n  const comicPanels = [];\n  for (let i=0; i < props.numPanels; i++) {\n    comicPanels.push(\n      <img\n        src={props.imgLinks[i]}\n        key={i}\n        alt={altText[i]}\n        onLoad={props.imgLoaded}\n      />\n    )\n  }\n\n  return (\n    <div id=\"comic-container\">\n      <div id=\"loading\" style={{display: props.isLoading ? \"inline-block\" : \"none\"}}>Loading...</div>\n      <div id=\"comic\" style={{display: !props.isLoading ? \"inline-block\" : \"none\"}}>{comicPanels}</div>\n      <ComicInfo\n        comicsList={props.comicsUsed}\n        numPanels={props.numPanels}\n        isLoading={props.isLoading}\n      />\n    </div>\n  )\n};\n\ninterface ComicInfoProps {\n  comicsList: Array<string>,\n  numPanels: number,\n  isLoading: boolean\n};\n\nconst ComicInfo = (props: ComicInfoProps) => {\n  const links = props.comicsList.map((comic) =>\n    \"https://xkcd.com/\" + comic\n  ).slice(0, props.numPanels);\n\n  const comicLinks = links.map((link, index) =>\n    <p className=\"comic-link\" key={index}>\n      <a href={link} target=\"_blank\" rel=\"noreferrer\">{link}</a>\n    </p>\n  );\n\n  return (\n    <div id=\"comic-info\" style={{display: !props.isLoading ? \"block\" : \"none\"}}>\n      <p>Comics used:</p>\n      {comicLinks}\n    </div>\n  )\n};\n\nexport default Comic;\n","import './Footer.css';\n\nconst Footer = () => {\n  return (\n    <footer>\n      <p>Please e-mail gibsramen (at) gmail.com to report an error or weird panel</p>\n      <p>All comic panels taken from <a href=\"https://xkcd.com\">xkcd.com</a></p>\n    </footer>\n  )\n};\n\nexport default Footer;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}